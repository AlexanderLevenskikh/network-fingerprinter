import { PacketViewHttpHeaderName } from '../../../DAL/Packet/Http/PacketViewHttpHeaderName';

export function mapHttpTextHeaderNameToView(headerName: string): PacketViewHttpHeaderName {
    const map = {
        'accept': PacketViewHttpHeaderName.Accept,
        'accept-charset': PacketViewHttpHeaderName.AcceptCharset,
        'accept-features': PacketViewHttpHeaderName.AcceptFeatures,
        'accept-encoding': PacketViewHttpHeaderName.AcceptEncoding,
        'accept-language': PacketViewHttpHeaderName.AcceptLanguage,
        'accept-ranges': PacketViewHttpHeaderName.AcceptRanges,
        'cache-control': PacketViewHttpHeaderName.CacheControl,
        'connection': PacketViewHttpHeaderName.Connection,
        'content-length': PacketViewHttpHeaderName.ContentLength,
        'content-location': PacketViewHttpHeaderName.ContentLocation,
        'content-range': PacketViewHttpHeaderName.ContentRange,
        'content-security-policy': PacketViewHttpHeaderName.ContentSecurityPolicy,
        'content-type': PacketViewHttpHeaderName.ContentType,
        'cookie': PacketViewHttpHeaderName.Cookie,
        'dnt': PacketViewHttpHeaderName.DNT,
        'date': PacketViewHttpHeaderName.Date,
        'etag': PacketViewHttpHeaderName.ETag,
        'expect': PacketViewHttpHeaderName.Expect,
        'expires': PacketViewHttpHeaderName.Expires,
        'from': PacketViewHttpHeaderName.From,
        'host': PacketViewHttpHeaderName.Host,
        'if-match': PacketViewHttpHeaderName.IfMatch,
        'if-modified-since': PacketViewHttpHeaderName.IfModifiedSince,
        'if-none-match': PacketViewHttpHeaderName.IfNoneMatch,
        'if-range': PacketViewHttpHeaderName.IfRange,
        'if-unmodified-since': PacketViewHttpHeaderName.IfUnmodifiedSince,
        'keep-alive': PacketViewHttpHeaderName.KeepAlive,
        'last-modified': PacketViewHttpHeaderName.LastModified,
        'link': PacketViewHttpHeaderName.Link,
        'location': PacketViewHttpHeaderName.Location,
        'negotiate': PacketViewHttpHeaderName.Negotiate,
        'origin': PacketViewHttpHeaderName.Origin,
        'pragma': PacketViewHttpHeaderName.Pragma,
        'proxy-authenticate': PacketViewHttpHeaderName.ProxyAuthenticate,
        'proxy-authorization': PacketViewHttpHeaderName.ProxyAuthorization,
        'range': PacketViewHttpHeaderName.Range,
        'referer': PacketViewHttpHeaderName.Referer,
        'retry-after': PacketViewHttpHeaderName.RetryAfter,
        'server': PacketViewHttpHeaderName.Server,
        'te': PacketViewHttpHeaderName.TE,
        'trailer': PacketViewHttpHeaderName.Trailer,
        'transfer-encoding': PacketViewHttpHeaderName.TransferEncoding,
        'upgrade': PacketViewHttpHeaderName.Upgrade,
        'user-agent': PacketViewHttpHeaderName.UserAgent,
        'variant-vary': PacketViewHttpHeaderName.VariantVary,
        'vary': PacketViewHttpHeaderName.Vary,
        'via': PacketViewHttpHeaderName.Via,
        'warning': PacketViewHttpHeaderName.Warning,
        'x-content-security-policy': PacketViewHttpHeaderName.XContentSecurityPolicy,
        'x-dnsprefetch-control': PacketViewHttpHeaderName.XDNSPrefetchControl,
        'x-operamini-phone-ua': PacketViewHttpHeaderName.XOperaMiniPhoneUA,
        'x-operamini-features': PacketViewHttpHeaderName.XOperaMiniFeatures,
        'x-operamini-phone': PacketViewHttpHeaderName.XOperaMiniPhone,
        'x-forwarded-for': PacketViewHttpHeaderName.XForwardedFor,
        'x-frame-options': PacketViewHttpHeaderName.XFrameOptions,
        'x-requested-with': PacketViewHttpHeaderName.XRequestedWith,
    };

    return map[ headerName.toLowerCase() ] || PacketViewHttpHeaderName.Unknown;
}
